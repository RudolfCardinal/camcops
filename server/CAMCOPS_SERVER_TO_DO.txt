
*** finish Alembic framework, i.e.
    reading database URL from config, in turn from env var

*** make first migration, then add back filter_idnums_json

*** routing and URLs

===============================================================================
CAMCOPS SERVER THINGS TO DO NOW
===============================================================================

- fix MAKE_PACKAGE.py and server scripts to be able to serve tablet source
  code that's not in the Python server package (now we've moved to venvs
  properly)

- sort out SQLAlchemy, field type, and get_summaries()
    - use mixins to inherit fields; see
    http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/mixins.html

===============================================================================
CAMCOPS SERVER THINGS TO DO
===============================================================================

- O'Brien group study template (when details available).

- Giant "all tasks in full" view (like a clinical text view but for
  researchers)?

  ... maybe abstract a common core of the CTV and tracker into some sort of
      "agglomeration" class, then subclass this again for a research multi-task
      view.

- Edit existing (finalized) task instances? Do this in a generic way, i.e.
  offer table with fieldname, comment, old value, new value; constrain to
  min/max or permitted values where applicable; at first "submit", show
  differences and ask for confirmation; audit changes. For BLOBs, allow
  option to upload file (or leave unchanged).

- split pls into config (read at startup - maybe also preload strings for
  later speed) and WSGI request (e.g. "now").

  ... consider combining with any shift to SQLAlchemy, as the session object
  relates to this.
  
- shift to Arrow for dates/times? (With sqlalchemy-utils?)

- document that anonymisation for research exports is supported as a basic
  framework, but use CRATE if you want to do it properly.

- make more/all tasks downloadable, rather than in the giant strings file
    - strings
        - make a default isTaskCrippled() in BaseTask
    - other files
        - we don't want these in the same XML template
        - task JS, help HTML, any additional task-specific media
        - store in subdirectory of media path, like blobs
        - on the server side, point to one or more directories to scan
        - on the tablet, have an XFILE() function, keyed to the task

- index of tasks by patient ID, to speed up lookup on the tablet?
  Pros and cons to this.
  Maybe defer (on the server side) until SQL Alchemy properly considered.
  (In any case, the fields are indexed on the server; see Patient.)
  On the tablet side, may be worthwhile, though, as the number of tasks grows.
  Defer until we try Qt/C++.

===============================================================================
THOUGHTS/POTENTIAL THINGS TO DO
===============================================================================

- refine unit testing, i.e. more branch coverage, and use of real or dummy
  database-record instances in more cases
- see also Python modules for unit testing

- internationalization of web interface (framework done)

- SQLAlchemy would be an alternative engine.
    - CURRENT PREREQUISITES: COMMENTS. Not yet there:
        http://docs.sqlalchemy.org/en/rel_0_9/core/metadata.html
        http://docs.sqlalchemy.org/en/latest/core/metadata.html?highlight=metadata
    - WSGI: would use sessionmaker
        ... http://stackoverflow.com/questions/860313/sqlalchemy-is-convoluted
        ... http://stackoverflow.com/questions/2505426/sqlalchemy-layout-with-wsgi-application
        ... http://docs.sqlalchemy.org/en/rel_0_5/session.html#binding-session-to-an-engine
    - As yet (2013-05-07), SQL comments are not supported: http://docs.sqlalchemy.org/en/latest/core/schema.html
    - Dates in ISO8601 format: good exchange (see sqlalchemy_test.py), but restricting SQL modification just to the WHERE clause is tricky (haven't achieved that yet).
        Answer might be: http://stackoverflow.com/questions/21126371/converting-string-to-date-timestamp-in-sqlalchemy
    - Indexes: definable as part of the Column() definition: http://docs.sqlalchemy.org/en/latest/core/schema.html#defining-constraints-and-indexes
    - Won't add columns (creates whole table or nothing): http://docs.sqlalchemy.org/en/latest/core/schema.html#altering-schemas-through-migrations ; http://stackoverflow.com/questions/2103274/sqlalchemy-add-new-field-to-class-and-create-corresponding-column-in-table
    - Views: easy to add by hand.
    - For other applications: easily talks to two engines at once: http://docs.sqlalchemy.org/en/rel_0_5/session.html#session-partitioning
    - get-or-create idiom: http://stackoverflow.com/questions/2546207/does-sqlalchemy-have-an-equivalent-of-djangos-get-or-create
    - creating n fields programmatically, e.g. id numbers:

- potentially Pyramid or a similar framework; over and above SQLAlchemy, would bring (a) templating, e.g. Mako; (b) URL routing.
    - PREREQUISITES WOULD BE: correct URL routing when hosted at a sub-path; server-side sessions without too much faff.
  However, could also make better use of named string.format() arguments, and URL routing has some of its own complexities.
- Django probably the best, with a good ORM built in.

- MRI triggering on task side
    - e.g. tasks written in Javascript under Titanium on Windows (when
      available), or even on tablets (but better under Windows to eliminate
      network latency; see below)
    - projection via standard VGA/DVI/HDMI
    - tasks talk to TCP/IP server on (ideally) same machine
        http://docs.appcelerator.com/titanium/3.0/#!/api/Titanium.Network.Socket.TCP
    - server runs in e.g. Python with Twisted
    - server talks to MRI scanner (for pulse synchronization) and response
      devices via USB, serial, whatever
    - others' serial trigger devices/code
        https://cni.stanford.edu/wiki/MR_Hardware
        https://raw.githubusercontent.com/cni/widgets/master/python/startScan.py
        https://cni.stanford.edu/wiki/SaveTriggers.py

===============================================================================
CONSIDERED BUT NOT IMPLEMENTED
===============================================================================

- SFTP export.
  Not necessary, as one can mount an SFTP directory via NFS, then just export
  as a plain file.
    http://stackoverflow.com/questions/432385/sftp-in-python-platform-independent
    http://stackoverflow.com/questions/5195427/twisted-conch-filetransfer

- Option to pass set of patient identifying data to an external tool (e.g.
  user's custom Python) to generate a research ID, for the anonymisation step,
  e.g. hashing an NHS number using a secret method not known to CamCOPS.
  ... anonymisation is Somebody Else's Business; we have a separate tool for
      that.

- Filter on multiple patient IDs. Would only be relevant for researchers trying
  to take a subset of data.

  ... No current clear demand; therefore follow YAGNI principle.
      https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it


===============================================================================
Notes
===============================================================================

-------------------------------------------------------------------------------
Generator expressions v. list comprehensions
-------------------------------------------------------------------------------
LC in general faster; GE are used to save memory, not routinely.
- http://stackoverflow.com/questions/11964130/
