===============================================================================
CAMCOPS SERVER THINGS TO DO NOW
===============================================================================

*** Test framework via cfg based on demo text but using sqlite memory db

*** HL7 backend

*** host script at funny paths

*** NB special device for "web front end"/"manually uploaded"
    ... see DEVICE_NAME_FOR_SERVER
*** similarly: special user for "system"
    ... see USER_NAME_FOR_SYSTEM

*** unit tests

===============================================================================
KEY THOUGHTS
===============================================================================

- "tasks need doing" in the context of a research study

    - define patients on server (per group)
        -- share main patient/patient_idnum tables
        -- have a device code for "server" -- such as "server"
            ... prevent devices registering that
            ... fix merge_db to create and import that properly
        -- always in era "NOW"

    - ScheduledTask -- "task needs doing"
        - patient (by ID number)
        - group
        - task
        - due_from
        - due_by
        - cancelled?

        Example: "PHQ9 due for Mr X on 1 July; must be completed by 1 Aug"

    then for metacreation
    - TaskPanel
        = list of tasks, each with
            - task
            - due_from_relative_to_start_date
            - due_by_relative_to_start_date
        - instantiate with patient, group, start date
                -- PatientSchedule

        example:
            "In our study, we want a PHQ9 and GAD7 at the start, a PHQ9 at
            3 months, and a PHQ9 and GAD7 at 6 months."
                -- StudySchedule

            +

            "Mr Jones starts today."
                -- "enrol"

    Tablets should fetch "what needs doing" for any patients defined on the
    tablet, and display them nicely.

    Tasks must be complete to satisfy the requirement.

-   "This tablet client is attached to a specific patient and will operate in
    a patient-friendly, single-patient mode."

    "Show me what needs completing."

===============================================================================
CAMCOPS SERVER THINGS TO DO
===============================================================================

- Giant "all tasks in full" view (like a clinical text view but for
  researchers)?

  ... maybe abstract a common core of the CTV and tracker into some sort of
      "agglomeration" class, then subclass this again for a research multi-task
      view.

- Edit existing (finalized) task instances? Do this in a generic way, i.e.
  offer table with fieldname, comment, old value, new value; constrain to
  min/max or permitted values where applicable; at first "submit", show
  differences and ask for confirmation; audit changes. For BLOBs, allow
  option to upload file (or leave unchanged).

- index of tasks by patient ID, to speed up lookup on the tablet?
  Pros and cons to this.
  Maybe defer (on the server side) until SQL Alchemy properly considered.
  (In any case, the fields are indexed on the server; see Patient.)
  On the tablet side, may be worthwhile, though, as the number of tasks grows.
  Defer until we try Qt/C++.

===============================================================================
THOUGHTS/POTENTIAL THINGS TO DO
===============================================================================

??? make main pages refer to CSS as a file; provide views to serve those CSS
    files; mark them as cacheable by the browser (but still need inline CSS
    for PDF creation!).

- refine unit testing, i.e. more branch coverage, and use of real or dummy
  database-record instances in more cases
- see also Python modules for unit testing

- internationalization of web interface (framework done)

- MRI triggering on task side
    - e.g. tasks written in Javascript under Titanium on Windows (when
      available), or even on tablets (but better under Windows to eliminate
      network latency; see below)
    - projection via standard VGA/DVI/HDMI
    - tasks talk to TCP/IP server on (ideally) same machine
        http://docs.appcelerator.com/titanium/3.0/#!/api/Titanium.Network.Socket.TCP
    - server runs in e.g. Python with Twisted
    - server talks to MRI scanner (for pulse synchronization) and response
      devices via USB, serial, whatever
    - others' serial trigger devices/code
        https://cni.stanford.edu/wiki/MR_Hardware
        https://raw.githubusercontent.com/cni/widgets/master/python/startScan.py
        https://cni.stanford.edu/wiki/SaveTriggers.py

===============================================================================
CONSIDERED BUT NOT IMPLEMENTED
===============================================================================

- SFTP export.
  Not necessary, as one can mount an SFTP directory via NFS, then just export
  as a plain file.
    http://stackoverflow.com/questions/432385/sftp-in-python-platform-independent
    http://stackoverflow.com/questions/5195427/twisted-conch-filetransfer

- Option to pass set of patient identifying data to an external tool (e.g.
  user's custom Python) to generate a research ID, for the anonymisation step,
  e.g. hashing an NHS number using a secret method not known to CamCOPS.
  ... anonymisation is Somebody Else's Business; we have a separate tool for
      that (see CRATE).

- Filter on multiple patient IDs. Would only be relevant for researchers trying
  to take a subset of data.
  ... No current clear demand; therefore follow YAGNI principle.
      https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it
