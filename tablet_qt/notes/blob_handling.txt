- Clearly preferable to have BLOBs in the database, both on the server and the
  client (server: easier to manage; client: within secure encrypted database).

- Clearly preferable to have BLOBs in their own table (server: doesn't slow
  down all other tables; client: can upload record-by-record for BLOBs and
  table-by-table for other things).

- Then, storage/access within the client...

- Writing images to a BLOB is a slow operation: it's the QImage to QByteArray
  conversion (and reverse conversion) that's relatively slow.
  This slows down rotation.
  The rotation operation itself, on a QImage, is fast.

Possible strategies, then:

- Blob/Field handle QByteArray only; QuImage deals with all the rotation.
  Slow for the client but simple.

- Blob/Field deal with a combination of a QByteArray (written as PNG to the
  database) and a "rotation" field, and client/server rotate on the fly.
  Should make the client rotation operation fast.
  Could store rotation field in the task table, as before, but that is
  particularly inelegant.
  Could make Blob and/or Field objects image-aware, and have them store
  rotation as an extra field in the blob table.
  Also allows the potential to preserve more source information, e.g. EXIF,
  because no image manipulations are stored.

  ... for example:

    new integer field: blob.image_rotation_deg_ccw
    new text field: blob.filetype   // e.g. "png"

    QImage Blob::image() const;  // and cache it
    void Blob::rotateImage(int angle);
    void Blob::setImage(const QImage& image);

    QImage FieldRef::image() const;
    void FieldRef::rotateImage(int angle);

- Store only final rotated images and do the rotation in the background.

Tried the Blob method -- massively faster than before.
Makes the difference between dire and respectable performance.
