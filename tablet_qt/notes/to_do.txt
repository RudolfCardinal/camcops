
===============================================================================
TO DO NOW
===============================================================================

INSTALL NEW SERVER

ANDROID
- RETEST .APK
- UPLOAD .APK TO GOOGLE PLAY

- THEN get on with
    (a) server -> SQLAlchemy + Pyramid
    (b) CISR implementation

===============================================================================
REQUIRED, BUT NOT IMMEDIATELY, OR TO THINK ABOUT
===============================================================================

SERVER
- cross-platform, Pyramid/SQLAlchemy/Mako

TASKS
- CIS-R, using the new DynamicQuestionnaire class

CLIENT
- Width requirements of QuPickerInline are a bit much, but then it's also a bit
  duff visually compared to QuPickerPopup.

BUILDS/DISTRIBUTION
- Windows build
- OS/X build
- Google Play Store
- Apple App Store

- *** chains (see e.g. ResearchMenu.js; MenuTableRow.js; QuestionnaireHeader.js...)
    ... or is that pointless relative to a "set of tasks" concept?
- *** concept of "set of tasks" as well as "chain of tasks"

- *** "single patient" mode, cf. "researcher" mode? Tied to a specific
  server?

- *** some sort of "group" concept, e.g. "affective disorder research database"
  plus "clinical" (or sometimes "all"), ?cf. Unix.

    - a group has one or more users
    - a user is in ONE OR MORE GROUPS

        e.g. 0 = Affective Disorders Research Database
             1 = Clinicians
             2 = O'Brien clinical lab

    - patient ID policy remains consistent across the server
    - tasks have a group ID (on the server, to keep the client simple)
      ... editable on the server, if required
    - a user chooses (on the web site) which group they upload to
      ... shouldn't be something that they need to change often

    - a group can see ITS OWN records +/- THOSE OF OTHER SPECIFIC GROUPS
        e.g. - members of the Clinicians group can see everything
             - members of the ADRD group can see their things only
        ... with a shortcut for "can see all"

    This allows various concepts:
    - a superset of "see your own +/- everyone's"
        = e.g. one group per user / one user per group, plus a "root" group
    - multiple experiments, with a group for each
        ... some users on individual experiments
        ... some on several
        ... lab head can see all
    - that in a clinical research context, where clinicians see everything
      from multiple research groups

    Fairly simple. The only question is how much the client should know.
    - If "nothing", which is the simplest:
        - users use web site if they want to switch groups
        - "does task exist" is tested by server within the context of the
          user's current group
        - ... which just means that users need to be aware that IF data has
          been copied to the server, it should probably be moved to the server
          prior to changing groups.

- Note for SERVER side: is ZIP generation inefficient with >1 SQL query per
  task fetched (e.g. generate PKs, filter PKs, fetch...)
  ... ensure that in general this is done by generate PKs -> yield Task -> filter


===============================================================================
QT BUGS?
===============================================================================

- Under Android, ScrollMessageBox scrolls with multi-finger gestures but not
  with single-finger swipes, even though the single-finger gestures work fine
  elsewhere.
  This also varies with device, e.g. Asus Transformer Prime TF201 requires
  two-finger swipe in ScrollMessageBox, whereas Samsung Galaxy S5 (?) provides
  one-finger swipe.
  See my thoughts in uifunc::applyScrollGestures().
  See also:
  - https://forum.qt.io/topic/62385/one-finger-swipe-gestures
  - https://bugreports.qt.io/browse/QTBUG-40461

- Qt Android bug: sometimes selection cursors don't match the position of a
  line edit (e.g. in initial password dialog).
  https://bugreports.qt.io/browse/QTBUG-58503

- Sometimes there is a delay after clicking on a QuBoolean with an image, like
  the picture-naming in the ACE-III. The delay occurs whether you click the
  boolean indicator (with its "you are touching me" shading) or the image.
  It seems to occur only if the main window is NOT maximized.
  The delay is in calling AspectRatioPixmap::mousePressEvent, for example.
  Using "#define DEBUG_CLICK_TIMING" shows that the delay is NOT because the
  widget's overridden sizeHint (etc.) code is being called.
  - Not sure that this is a problem in my code.
  - Not retested recently; other things have also improved performance (e.g.
    threaded database writes).

===============================================================================
MAYBE IN THE FUTURE
===============================================================================

- extra strings: ?add field for ISO-639-1 two-letter language code (e.g. "en"
  English)
    ... though different servers can distribute whichever language they want;
        this is only relevant for "simultaneously multilingual" environments
    ... defer for now

- VerticalScrollArea: *Nearly* perfect. Unclear if residual minor error relates
  to VerticalScrollArea itself, or to misreporting of ideal height by e.g.
  GridLayoutHfw.
  (Example: PDSS [with no task strings]?)
  (Note: sometimes worth trying to un-maximize then maximize the window; error
  can sometimes go away.)
  2017-07-09: I think this is fixed now.
