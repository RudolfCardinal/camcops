/*
    http://doc.qt.io/qt-5/stylesheet-syntax.html

    REMEMBER: Layouts don't have CSS. Widgets do.
        http://doc.qt.io/qt-5/stylesheet.html
        https://bugreports.qt.io/browse/QTBUG-22862
    BUT layouts do have spacing; use e.g.
        setSpacing() -- between widgets inside the layout
            ... typically leave this one
        setContentsMargins()  -- around the whole set of widgets
            ... typically reduce this one

    Avoid restyling QWidget/QLabel in any major way, except for debugging;
    for example, the "About Qt" dialog uses QLabel.

    You'd hope that you could specify a base font here (e.g. by text
    substitution) and then have all other fonts specified relative to it.
    In Qt 4.8, there was no way to do that: pt or px only. And that
    remains true for font sizes:

    http://doc.qt.io/qt-5.7/stylesheet-reference.html#font-size
    http://doc.qt.io/qt-5.7/stylesheet-reference.html#length

    So, since one can't use percentages or "1.2em", there are two options:
    (1) all elements using fonts need custom CSS, done in code. Silly!
    (2) We do it in CSS but with multiple search/replace - better.
    We will do a replacement that uses Qt QString arg format, with percentages,
    with the following mapping:

        %1      normal
        %2      big
        %3      heading
        %4      title
        %5      base menu font size

    ALL CSS USING CamcopsApp::getSubstitutedCss MUST PROVIDE AT LEAST ONE
    PLACEHOLDER FOR EACH OF THESE, e.g. in a comment if not otherwise used
    (or you get "QString::arg: Argument missing").

    ... plus custom code-applied CSS for text whose size is determined
    dynamically.

    Selector mechanisms include:

        classname
            ... applies to this class and any C++ derived classes
            ... BUT: doesn't apply to "child widgets" of another C++ class
        .classname
            ... this C++ class but not its derived classes
        parent child
            ... applies to child class that's within a parent widget
        classname[property="value"]
            ... specific property
        *[property="value"]
            ... general property
        .customproperty
            ... ? http://stackoverflow.com/questions/4596903
        A, B
            either A or B
        #id
            ... matches by setObjectName()

*/

/* =========================================================================
   General styling
   ========================================================================= */

QWidget {
    color: black;
    border: 0;
    margin: 0;
    padding: 0;
    font-size: %1pt;
}

/* =========================================================================
   Modifiers, using dynamic properties
   ========================================================================= */

*[missing="true"] {
    background-color: yellow;
}

*[italic="true"] {
    font-style: italic;
}

/* =========================================================================
   Things that look or behave like buttons
   =========================================================================
   - Note that ClickableLabel inherits from QPushButton
   - Note that if you set ClickableLabel and *then* QPushButton CSS, then
     the latter overrides the former (even though you would think child classes
     are more specific than parent classes). As per
     http://doc.qt.io/qt-5/stylesheet-syntax.html
*/

QPushButton,
QComboBox#picker_inline,
ClickableLabelWordWrapWide#picker_popup,
ClickableLabelWordWrapWide#button,
BooleanWidget ClickableLabelWordWrapWide,
NvpChoiceDialog ClickableLabelWordWrapWide,
PagePickerDialog ClickableLabelWordWrapWide {
    font-weight: bold;
    background-color: lightgray;
    border-style: solid;
    border-width: 2px;
    border-radius: 10px;
    border-color: darkgray;
    padding: 5px;
}

ClickableLabel,
ClickableLabelWordWrapWide {
    font-weight: normal;
    background-color: rgb(0, 0, 0, 0);  /* transparent */
    border: 1px black;
    border-radius: 0;
    padding: 0;
    margin: 0;
}

QPushButton:pressed,
QComboBox#picker_inline:pressed,
ClickableLabel:pressed,
ClickableLabelWordWrapWide:pressed {
    background-color: rgba(100, 100, 255, 200);  /* to match BUTTON_PRESSED_COLOUR */
}

/* The above will override the generic dynamic modifiers, so we re-specify... */
ClickableLabelWordWrapWide#picker_popup[missing="true"],
QComboBox#picker_inline[missing="true"] {
    background-color: yellow;
}

QPushButton {
    color: black;
}
QPushButton:disabled {
    color: lightgray;
    background-color: gray;
}

ClickableLabelWordWrapWide:disabled {
    /* Override QPushButton:disabled */
    background-color: rgb(0, 0, 0, 0);
}

/* Slightly different styling for QuPickerPopup */
ClickableLabelWordWrapWide#picker_popup {
    color: blue;
}

/* =========================================================================
   QComboBox
   =========================================================================
   - For QuPickerInline
   - http://stackoverflow.com/questions/29939990
   - http://doc.qt.io/qt-4.8/stylesheet-examples.html#customizing-qcombobox
   - http://doc.qt.io/qt-5/stylesheet-syntax.html#sub-controls
   - http://doc.qt.io/qt-5/stylesheet-reference.html#list-of-stylable-widgets
   - http://stackoverflow.com/questions/13308341/qcombobox-abstractitemviewitem

   - QComboBox gets the "on" state when the popup is open
   - "::drop-down" is the arrow at the right (typically) with which to open
     the popup
   - ":item:selected" means (e.g.) selected with the arrow keys, not "chosen"
   - ":item:checked" means "chosen"
*/

/*
QComboBox::drop-down {
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 15px;

    border-left-width: 1px;
    border-left-color: darkgray;
    border-left-style: solid;
    border-top-right-radius: 3px;
    border-bottom-right-radius: 3px;
}
*/

QComboBox#picker_inline {
    color: blue;
    selection-color: red;
}
QComboBox#picker_inline:item {
    /*
    - using pt as a unit doesn't work here
    - not specifying height doesn't work; heights get *much* too big
    - Qt knows about px, ex (?), em, pt; see qcssparser.cpp
      ... [ex: http://stackoverflow.com/questions/918612/what-is-the-value-of-the-css-ex-unit]
      ... though px/ex/em in one function (for general use)
          and pt/px in another (for fonts)
    - em works well (e.g. 3em)
    - ex also works well (e.g. 6ex)
    */
    height: 6ex;
    padding-left: 20px;  /* move text right to make room for tick mark */
}
QComboBox#picker_inline:item:selected {
    border: 2px solid black;
}
QComboBox#picker_inline:item:checked {
    font-weight: bold;
}

/* Read-only version of QuPickerInline */
QLabel#picker_inline {
    color: blue;
    font-weight: bold;
}

/* =========================================================================
   Editors
   ========================================================================= */

GrowingTextEdit,
QDateTimeEdit,
QDoubleSpinBox,
QLineEdit,
QSpinBox,
QTextEdit {
    background-color: lightgray;
}

/* =========================================================================
   Outer containers
   ========================================================================= */

#questionnaire_outer_object {
    /* background-color ignored, for unclear QStackedWidget reason */
}
#questionnaire_background_patient {
    background-color: white;
}
#questionnaire_background_clinician {
    background-color: #FFFFD0;  /* pale yellow */
}
#questionnaire_background_config {
    background-color: #E6E6FA;  /* lavender */
}

/* =========================================================================
   Questionnaire header
   ========================================================================= */

QuestionnaireHeader QLabel {
    font-size: %4pt;
    color: darkgrey;
}
#header_horizontal_line {
    background-color: black;
}

/* =========================================================================
   Questionnaire header
   ========================================================================= */

#questionnaire_horizontal_line {
    background-color: black;
}

/* =========================================================================
   Widgets
   ========================================================================= */

/* BooleanWidget in its Text appearance */
/* Previously, everything done with #boolean_widget. Now, sub-widgets within
   a BooleanWidget. That is, replaced
        #boolean_widget[state...]:pseudo {}
   with
        BooleanWidget ClickableLabelWordWrapWide[state...]:pseudo {}
*/
BooleanWidget ClickableLabelWordWrapWide[state="disabled"] {
    background-color: darkgrey;
}
BooleanWidget ClickableLabelWordWrapWide[state="null"] {
    background-color: white;
}
BooleanWidget ClickableLabelWordWrapWide[state="nullrequired"] {
    background-color: yellow;
}
BooleanWidget ClickableLabelWordWrapWide[state="false"] {
    background-color: white;
}
BooleanWidget ClickableLabelWordWrapWide[state="true"] {
    background-color: red;
}
BooleanWidget ClickableLabelWordWrapWide[readonly="true"]:pressed {
    background-color: grey;
}
BooleanWidget ClickableLabelWordWrapWide[readonly="false"]:pressed {
    background-color: rgba(100, 100, 255, 200);
}
/* ... to match BUTTON_PRESSED_COLOUR */

#countdown_label {
    font-weight: bold;
}

#quheading {
    background-color: lightgrey;
}

#mcq_instruction {
    color: darkgray;
    font-weight: bold;
}

/*
    For QuSlider
    - this is quite hard
    - http://doc.qt.io/qt-5.7/stylesheet-examples.html#customizing-qslider
    - http://thesmithfam.org/blog/2010/03/10/fancy-qslider-stylesheet/
    - https://forum.qt.io/topic/52150/proportions-of-elemnts-like-sliders

    groove border not always shown; apply the border to the sub-page/add-page

    sub-page:
        The part of the slider to the LEFT or ABOVE the handle.
        This makes sense for scrollbars that control pages (down -> +),
        but we have to invert it for sliders where up is more.

    hover colour: to match BUTTON_PRESSED_COLOUR, except not transparent

    QSlider padding is essential to get the handle outside the groove

    four-dimensional CSS parameters are: top, right, bottom, left
    three-dimensional CSS parameters are: top, right/left, bottom
    two-dimensional CSS parameters are: vertical, horizontal
*/
/*
QSlider {
    background-color: green;
}
*/
QSlider:horizontal {
    padding: 10px 0;
}
QSlider:vertical {
    padding: 0 10px;
}

QSlider::groove {
    border: 2px solid black;
    background: lightgray;
}
QSlider::groove:horizontal {
    height: 10px;
    margin: 2px 0;
}
QSlider::groove:vertical {
    width: 10px;
    margin: 0 2px;
}

QSlider::add-page,
QSlider::sub-page {
    border: 2px solid black;
}
QSlider::sub-page:horizontal,
QSlider::add-page:vertical {
    background: red;
}
QSlider::add-page:horizontal,
QSlider::sub-page:vertical {
    background: white;
}

QSlider::handle {
    background: darkgray;
    border: 2px solid black;
    border-radius: 10px;
}
QSlider::handle:horizontal {
    width: 20px;
    margin: -10px 0;
}
QSlider::handle:vertical {
    height: 20px;
    margin: 0 -10px;
}
QSlider::handle:horizontal:hover,
QSlider::handle:vertical:hover {
    background: rgba(100, 100, 255);
}

QSlider::sub-page:horizontal:disabled,
QSlider::add-page:vertical:disabled {
    border-color: #999;
}
QSlider::add-page:horizontal:disabled,
QSlider::add-page:vertical:disabled {
    border-color: #999;
}
QSlider::handle:disabled {
    background: #eee;
    border-color: #aaa;
}

/* The value label */
QLabel#slider {
    color: red;
    font-weight: bold;
}

CanvasWidget {
    border: 2px solid gray;
}

/* QuPhoto */
AspectRatioPixmapLabel {
    background-color: lightgray;
}

/* QuMCQGrid */
#mcq_grid #option_background {
    background-color: lightgray;
}
#mcq_grid #question {
    font-weight: bold;
    padding: 5px;
}
#mcq_grid #option {
    padding: 5px;
}
#mcq_grid #title {
    font-weight: bold;
    padding: 5px;
}
#mcq_grid #subtitle {
    font-weight: bold;
    padding: 5px;
}
#mcq_grid #vline {
    background-color: darkgray;
}

/* QuMCQGridDouble */
#mcq_grid_double #option_background {
    background-color: lightgray;
}
#mcq_grid_double #question {
    font-weight: bold;
    padding: 5px;
}
#mcq_grid_double #option {
    padding: 5px;
}
#mcq_grid_double #title {
    font-weight: bold;
    padding: 5px;
}
#mcq_grid_double #subtitle {
    font-weight: bold;
    padding: 5px;
}
#mcq_grid_double #vline {
    background-color: darkgray;
}

/* QuMCQGridSingleBoolean */
#mcq_grid_single_boolean #option_background {
    background-color: lightgray;
}
#mcq_grid_single_boolean #question {
    font-weight: bold;
    padding: 5px;
}
#mcq_grid_single_boolean #option {
    padding: 5px;
}
#mcq_grid_single_boolean #title {
    font-weight: bold;
    padding: 5px;
}
#mcq_grid_single_boolean #subtitle {
    font-weight: bold;
    padding: 5px;
}
#mcq_grid_single_boolean #vline {
    background-color: darkgray;
}


/* =========================================================================
   Debugging
   ========================================================================= */

#debug_green {
    background-color: green;
}
#debug_red {
    background-color: red;
}
#debug_blue {
    background-color: blue;
}
#debug_yellow {
    background-color: yellow;
}
#debug_pink {
    background-color: pink;
}
HeightForWidthLayoutContainer {
    background-color: yellow;
}
